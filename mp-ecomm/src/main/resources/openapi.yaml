openapi: 3.1.0
info:
  title: MicroProfile e-Commerce store - OpenAPI 3.1
  description: |-
    This is an e-commerce application named "MicroProfile e-Commerce", an online store based on microservices architecture to illustrate the practical use of MicroProfile APIs in creating cloud-native applications. This project serves as an applied learning path for Java developers, showcasing how to integrate MicroProfile APIs into real-world applications effectively.

    In the fourth chapter of the MicroProfile Tutorial, we've switched to the design first approach! You can also help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The MicroProfiel e-Commerce Store repository](https://github.com/ttelang/microprofile-examples)
    - [The source API definition for the MicroProfile e-Commerce Store](https://github.com/ttelang/microprofile-examples/blob/main/mp-ecomm/src/main/resources/openapi.yaml)
  termsOfService: https://www.eclipse.org/legal/termsofuse.php
  contact:
    email: tarun.telang@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about MicroProfile
  url: http://microprofile.io
servers:
  - url: https://store.microprofile.io/api/v3
paths:
  /products:
    get:
      summary: List all products
      operationId: listProducts
      tags:
        - Product Catalog
      responses:
        '200':
          description: An array of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - Product Catalog
      summary: Add a new product to the store
      description: Add a new product to the store
      operationId: createProduct
      requestBody:
        description: Create a new product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '405':
          description: Invalid input
      security:
        - mpstore_auth:
            - write:products
            - read:products
    put:
      tags:
        - Product Catalog
      summary: Update a product
      description: Update an existing product by Id
      operationId: getProducts
      responses:
        '200':
          description: An array of products
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - mpstore_auth:
            - write:products
            - read:products
  /products/{productId}:
    get:
      tags:
        - Product Catalog
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - mpstore_auth:
            - write:products
            - read:products
    delete:
      tags:
        - Product Catalog
      summary: Deletes a product
      description: delete a product
      operationId: deleteProduct
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid product value
      security:
        - mpstore_auth:
            - write:products
            - read:products
  /cart/{userId}:
    get:
      summary: Retrieve the shopping cart for a specific user
      operationId: getCart
      tags:
        - Shopping Cart
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user whose cart is being fetched.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Shopping cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
    post:
      summary: Add a product to the shopping cart for a specific user
      operationId: addToCart
      tags:
        - Shopping Cart
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user for whom the product is being added to the cart.
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '201':
          description: Product added to cart
  
  /cart/{userId}/items/{itemId}:
    put:
      summary: Update the quantity of a specific cart item for a user
      operationId: updateCartItem
      tags:
        - Shopping Cart
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user whose cart item is being updated.
          schema:
            type: integer
            format: int64
        - name: itemId
          in: path
          required: true
          description: Unique identifier of the item to update in the cart.
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  format: int32
                  description: New quantity for the item.
      responses:
        '200':
          description: Cart item updated successfully
    delete:
      summary: Remove a specific item from a user's shopping cart
      operationId: removeCartItem
      tags:
        - Shopping Cart
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user whose cart item is being removed.
          schema:
            type: integer
            format: int64
        - name: itemId
          in: path
          required: true
          description: Unique identifier of the item to remove from the cart.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Cart item removed successfully
  /checkout/{userId}:
    post:
      summary: Checkout the shopping cart and place an order for a specific user
      operationId: checkoutOrder
      tags:
        - Shopping Cart
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user placing the order.
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentDetails:
                  type: object
                  properties:
                    method:
                      type: string
                    cardNumber:
                      type: string
                    expirationDate:
                      type: string
                    cvv:
                      type: string
                shippingAddress:
                  type: object
                  properties:
                    street:
                      type: string
                    city:
                      type: string
                    zipCode:
                      type: string
                    country:
                      type: string
      responses:
        '200':
          description: Checkout initiated successfully, order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid request data

  /inventory/{productId}:
    get:
      summary: Get inventory level for a specific product
      operationId: getProductInventory
      tags:
        - Inventory
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique identifier of the product to fetch inventory for.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Inventory level retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  productId:
                    type: integer
                    format: int64
                  inventoryLevel:
                    type: integer
                    format: int32
                    description: The current inventory level for the product.
      security:
        - api_key: []
  /order:
    post:
      tags:
        - Order Management
      summary: Place an order for a product
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /order/{orderId}:
    get:
      tags:
        - Order Management
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - Order Management
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /shipping:
    post:
      summary: Create a shipping request for an order
      operationId: createShippingRequest
      tags:
        - Shipping Request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingRequest'
      responses:
        '201':
          description: Shipping request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingResponse'
  /shipping/{shippingId}:
    get:
      summary: Get the status of a shipping request
      operationId: getShippingStatus
      tags:
        - Shipping Request
      parameters:
        - name: shippingId
          in: path
          required: true
          schema:
            type: string
            description: Unique identifier of the shipping request
      responses:
        '200':
          description: Shipping status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingStatusResponse'
  /user:
    post:
      tags:
        - User Management
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    post:
      tags:
        - User Management
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    post:
      tags:
        - User Management
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - User Management
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - User Management
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - User Management
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /payment:
    post:
      summary: Process a payment for an order
      operationId: Payment
      tags:
        - Payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                  format: int64
                  description: Unique identifier of the order for which payment is being processed.
                paymentDetails:
                  type: object
                  properties:
                    method:
                      type: string
                      description: Payment method, e.g., 'credit_card'.
                    cardNumber:
                      type: string
                      description: Credit card number.
                    expirationDate:
                      type: string
                      description: Expiration date of the credit card.
                    cvv:
                      type: string
                      description: CVV of the credit card.
      responses:
        '200':
          description: Payment processing successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionId:
                    type: string
                    description: Unique identifier for the payment transaction.
                  status:
                    type: string
                    description: Status of the payment processing, e.g., 'authorized', 'declined'.
components:
  schemas:
    Product: 
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
    ApiResponse:
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
      type: object
    Cart:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    CartItem:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
    OrderResponse:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
          description: Unique identifier for the created order.
        status:
          type: string
          description: Status of the order (e.g., "processing").
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
      xml:
        name: address
    ShippingRequest:
      type: object
      required:
        - orderId
        - shippingAddress
      properties:
        orderId:
          type: integer
          format: int64
          description: Unique identifier of the order being shipped.
        shippingAddress:
          $ref: '#/components/schemas/ShippingAddress'
    ShippingAddress:
      type: object
      required:
        - street
        - city
        - zipCode
        - country
      properties:
        street:
          type: string
          description: Street address for shipping.
        city:
          type: string
          description: City for shipping.
        zipCode:
          type: string
          description: Zip or postal code for shipping.
        country:
          type: string
          description: Country for shipping.
    ShippingResponse:
      type: object
      properties:
        shippingId:
          type: string
          description: Unique identifier for the shipping request.
        status:
          type: string
          description: Initial status of the shipping request, typically "processing".
    ShippingStatusResponse:
      type: object
      properties:
        shippingId:
          type: string
          description: Unique identifier for the shipping request.
        status:
          type: string
          description: Current status of the shipping request (e.g., "processing", "shipped", "delivered").
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      xml:
        name: user
  requestBodies:
    Product:
      description: Product object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
        application/xml:
          schema:
            $ref: '#/components/schemas/Product'
  securitySchemes:
    mpstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://store.microprofile.io/oauth/authorize
          scopes:
            write:products: modify products in your account
            read:products: read your products
    api_key:
      type: apiKey
      name: api_key
      in: header
